import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path

from src.model import IdealModel, PersonalModel
from src.cs import compute_cs_wprime, format_cs, format_wprime

st.set_page_config(page_title="Speed‚ÄìTime Model ‚Ä¢ onFlows", layout="wide")

st.title("‚ö° –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω –º–æ–¥–µ–ª —Å–∫–æ—Ä–æ—Å—Ç‚Äì–≤—Ä–µ–º–µ (onFlows)")
st.caption("–õ–µ–∫ –º–æ–¥–µ–ª —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Critical Speed (CS) –∏ W'.")

# ---------- Data loading ----------
st.sidebar.header("1) –ò–¥–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏")
default_csv_path = Path("data/ideal_distance_time_speed.csv")

# ‚úÖ –ø–æ–ø—Ä–∞–≤–µ–Ω —Ä–µ–¥ ‚Äì –∏–º–∞ –∑–∞—Ç–≤–∞—Ä—è—â–∞ —Å–∫–æ–±–∞
uploaded = st.sidebar.file_uploader("–ö–∞—á–∏ CSV —Å –∫–æ–ª–æ–Ω–∏ distance_km, time_min", type=["csv"])
if uploaded:
    ideal_df = pd.read_csv(uploaded)
else:
    if default_csv_path.exists():
        ideal_df = pd.read_csv(default_csv_path)
    else:
        st.error("–õ–∏–ø—Å–≤–∞ CSV —Å –∏–¥–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏. –ö–∞—á–∏ —Ñ–∞–π–ª –≤ sidebar-–∞.")
        st.stop()

# Validate basic schema
required_cols = {"distance_km", "time_min"}
if not required_cols.issubset(set(ideal_df.columns)):
    st.error(f"CSV —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ: {required_cols}. –û—Ç–∫—Ä–∏—Ç–∏: {list(ideal_df.columns)}")
    st.stop()

ideal_df = ideal_df.dropna().sort_values("distance_km")
ideal_df["v_kmh"] = ideal_df["distance_km"] / (ideal_df["time_min"]/60.0)

st.dataframe(ideal_df, use_container_width=True, hide_index=True)

ideal = IdealModel.from_distance_time_points(list(zip(ideal_df["distance_km"], ideal_df["time_min"])))

# ---------- Personalization points ----------
st.sidebar.header("2) –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ –∏–∑–±–æ—Ä)")
st.sidebar.write("–î–æ–±–∞–≤–∏ —Ä–µ–∞–ª–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ –∫–∞—Ç–æ –¥–≤–æ–π–∫–∏ `(distance_km, v_real_kmh)`.")

default_points = pd.DataFrame({
    "distance_km":[1.0, 3.0, 10.0],
    "v_real_kmh":[np.nan, np.nan, np.nan]
})
user_points_df = st.sidebar.data_editor(default_points, num_rows="dynamic", key="user_points")
user_points_df = user_points_df.dropna()

user_points = list(zip(user_points_df["distance_km"].tolist(), user_points_df["v_real_kmh"].tolist()))
personal = PersonalModel.from_user_points(ideal, user_points)

# ---------- CS & W' from 3' and 12' ----------
st.sidebar.header("3) Critical Speed (CS) –∏ W'")
st.sidebar.write("–ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Å–∫–æ—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞ 3 –∏ 12 –º–∏–Ω —Å–µ –æ—Ü–µ–Ω—è–≤–∞—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–Ω–∏—è –º–æ–¥–µ–ª. –ú–æ–∂–µ—à –¥–∞ –≥–∏ –ø—Ä–µ–∑–∞–ø–∏—à–µ—à.")

def model_speed_at_time(model: PersonalModel, t_min: float) -> float:
    s = model.distance_for_time(t_min, s_min=0.05, s_max=float(ideal_df['distance_km'].max())*2)
    v = model.speed_for_distance(s)
    return float(v)

v3_default = model_speed_at_time(personal, 3.0)
v12_default = model_speed_at_time(personal, 12.0)

col_a, col_b = st.sidebar.columns(2)
v3 = col_a.number_input("v(3 –º–∏–Ω) km/h", value=round(v3_default, 2))
v12 = col_b.number_input("v(12 –º–∏–Ω) km/h", value=round(v12_default, 2))

try:
    CS_mps, W_m = compute_cs_wprime([(3.0, v3), (12.0, v12)])
    st.sidebar.success(f"CS ‚âà {format_cs(CS_mps):.2f} km/h | W' ‚âà {format_wprime(W_m):.0f} m")
except Exception as e:
    st.sidebar.error(f"CS/W' –≥—Ä–µ—à–∫–∞: {e}")
    CS_mps, W_m = np.nan, np.nan

# ---------- Main tabs ----------
tab1, tab2, tab3 = st.tabs(["üìà –ö—Ä–∏–≤–∏", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏", "üßÆ –¢–∞–±–ª–∏—Ü–∏"])

# Shared s-grid
s_grid = np.linspace(ideal_df["distance_km"].min(), ideal_df["distance_km"].max(), 200)
v_id = personal.ideal.v_ideal(s_grid)
t_id = personal.ideal.t_ideal(s_grid)
v_p = personal.v_personal(s_grid)
t_p = personal.t_personal(s_grid)

with tab1:
    st.subheader("–°–∫–æ—Ä–æ—Å—Ç —Å–ø—Ä—è–º–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è")
    st.line_chart(pd.DataFrame({"s_km": s_grid, "v_ideal": v_id, "v_personal": v_p}).set_index("s_km"))
    st.subheader("–í—Ä–µ–º–µ —Å–ø—Ä—è–º–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è")
    st.line_chart(pd.DataFrame({"s_km": s_grid, "t_ideal": t_id, "t_personal": t_p}).set_index("s_km"))

with tab2:
    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –≤—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    mode = st.radio("–ò–∑–±–µ—Ä–∏ –≤—Ö–æ–¥:", ["–î–∏—Å—Ç–∞–Ω—Ü–∏—è (km)", "–í—Ä–µ–º–µ (min)", "–°–∫–æ—Ä–æ—Å—Ç (km/h)"], horizontal=True)

    if mode == "–î–∏—Å—Ç–∞–Ω—Ü–∏—è (km)":
        s_in = st.number_input("–î–∏—Å—Ç–∞–Ω—Ü–∏—è (km)", value=5.0, min_value=0.05, step=0.05)
        v_out = personal.speed_for_distance(s_in)
        t_out = personal.time_for_distance(s_in)
        st.info(f"–°–∫–æ—Ä–æ—Å—Ç: **{v_out:.2f} km/h**, –í—Ä–µ–º–µ: **{t_out:.2f} min**")

    elif mode == "–í—Ä–µ–º–µ (min)":
        t_in = st.number_input("–í—Ä–µ–º–µ (min)", value=30.0, min_value=0.1, step=0.1)
        s_out = personal.distance_for_time(t_in, s_min=0.05, s_max=float(ideal_df['distance_km'].max())*2)
        v_out = personal.speed_for_distance(s_out)
        st.info(f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: **{s_out:.2f} km**, –°—Ä–µ–¥–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç: **{v_out:.2f} km/h**")

    else:
        v_in = st.number_input("–°–∫–æ—Ä–æ—Å—Ç (km/h)", value=12.0, min_value=0.1, step=0.1)
        s_candidates = np.linspace(ideal_df["distance_km"].min(), ideal_df["distance_km"].max(), 500)
        v_candidates = personal.v_personal(s_candidates)
        idx = int(np.argmin(np.abs(v_candidates - v_in)))
        s_out = float(s_candidates[idx])
        t_out = personal.time_for_distance(s_out)
        st.info(f"–ù–∞–π-–±–ª–∏–∑–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: **{s_out:.2f} km**, –û—á–∞–∫–≤–∞–Ω–æ –≤—Ä–µ–º–µ: **{t_out:.2f} min**")

with tab3:
    st.subheader("–ò–¥–µ–∞–ª —Å—Ä–µ—â—É –ø–µ—Ä—Å–æ–Ω–∞–ª–µ–Ω –º–æ–¥–µ–ª (–ø–æ –º—Ä–µ–∂–∞ –æ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏)")
    table_df = pd.DataFrame({
        "distance_km": s_grid,
        "t_ideal_min": t_id,
        "v_ideal_kmh": v_id,
        "t_personal_min": t_p,
        "v_personal_kmh": v_p,
        "ratio_r": np.divide(v_p, v_id, out=np.ones_like(v_p), where=v_id>1e-12)
    })
    st.dataframe(table_df.round(3), use_container_width=True, hide_index=True)

st.divider()
st.caption("¬© onFlows ‚Ä¢ –ú–æ–¥–µ–ª: –ª–∏–Ω–µ–π–Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –≤—ä—Ä—Ö—É –∏–¥–µ–∞–ª–Ω–∏—Ç–µ —Ç–æ—á–∫–∏ + r(s) –æ—Ç —Ä–µ–∞–ª–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ. CS/W' –æ—Ç 3' –∏ 12'.")
